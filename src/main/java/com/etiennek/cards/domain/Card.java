package com.etiennek.cards.domain;

import static com.etiennek.cards.domain.CardLabelMappers.*;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;

@Entity
public class Card {

	@Id
	@GeneratedValue
	private Long id;
	private String gameId;
	private String name;
	private Integer attack;
	private Integer health;
	@Column(nullable = false)
	private int setId;
	@Column(nullable = false)
	private int typeId;
	private Integer factionId;
	private Integer rarityId;
	private Integer raceId;
	private Integer heroClassId;
	private Integer cost;
	private Integer durability;
	private String text;
	private String textInPlay;
	private String flavourText;
	private String artistName;
	private boolean collectible;
	private boolean elite;
	private String howToGet;
	private String howToGetGold;

	public String getSetLabel() {
		return SetLabelMapper.map(setId);
	}

	public String getTypeLabel() {
		return TypeLabelMapper.map(typeId);
	}

	public String getFactionLabel() {
		return FactionLabelMapper.map(factionId);
	}

	public String getRarityLabel() {
		return RarityLabelMapper.map(rarityId);
	}

	public String getRaceLabel() {
		return RaceLabelMapper.map(raceId);
	}

	public String getHeroClassLabel() {
		return ClassLabelMapper.map(heroClassId);
	}

	// --- Below gets generated by Eclipse code generation ---

	public Card() {
		super();
	}

	public Card(Long id, String gameId, String name, Integer attack,
			Integer health, int setId, int typeId, Integer factionId,
			Integer rarityId, Integer raceId, Integer heroClassId,
			Integer cost, Integer durability, String text, String textInPlay,
			String flavourText, String artistName, boolean collectible,
			boolean elite, String howToGet, String howToGetGold) {
		super();
		this.id = id;
		this.gameId = gameId;
		this.name = name;
		this.attack = attack;
		this.health = health;
		this.setId = setId;
		this.typeId = typeId;
		this.factionId = factionId;
		this.rarityId = rarityId;
		this.raceId = raceId;
		this.heroClassId = heroClassId;
		this.cost = cost;
		this.durability = durability;
		this.text = text;
		this.textInPlay = textInPlay;
		this.flavourText = flavourText;
		this.artistName = artistName;
		this.collectible = collectible;
		this.elite = elite;
		this.howToGet = howToGet;
		this.howToGetGold = howToGetGold;
	}

	public Long getId() {
		return id;
	}

	public String getGameId() {
		return gameId;
	}

	public String getName() {
		return name;
	}

	public Integer getAttack() {
		return attack;
	}

	public Integer getHealth() {
		return health;
	}

	public int getSetId() {
		return setId;
	}

	public int getTypeId() {
		return typeId;
	}

	public Integer getFactionId() {
		return factionId;
	}

	public Integer getRarityId() {
		return rarityId;
	}

	public Integer getRaceId() {
		return raceId;
	}

	public Integer getHeroClassId() {
		return heroClassId;
	}

	public Integer getCost() {
		return cost;
	}

	public Integer getDurability() {
		return durability;
	}

	public String getText() {
		return text;
	}

	public String getTextInPlay() {
		return textInPlay;
	}

	public String getFlavourText() {
		return flavourText;
	}

	public String getArtistName() {
		return artistName;
	}

	public boolean isCollectible() {
		return collectible;
	}

	public boolean isElite() {
		return elite;
	}

	public String getHowToGet() {
		return howToGet;
	}

	public String getHowToGetGold() {
		return howToGetGold;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result
				+ ((artistName == null) ? 0 : artistName.hashCode());
		result = prime * result + ((attack == null) ? 0 : attack.hashCode());
		result = prime * result + (collectible ? 1231 : 1237);
		result = prime * result + ((cost == null) ? 0 : cost.hashCode());
		result = prime * result
				+ ((durability == null) ? 0 : durability.hashCode());
		result = prime * result + (elite ? 1231 : 1237);
		result = prime * result
				+ ((factionId == null) ? 0 : factionId.hashCode());
		result = prime * result
				+ ((flavourText == null) ? 0 : flavourText.hashCode());
		result = prime * result + ((gameId == null) ? 0 : gameId.hashCode());
		result = prime * result + ((health == null) ? 0 : health.hashCode());
		result = prime * result
				+ ((heroClassId == null) ? 0 : heroClassId.hashCode());
		result = prime * result
				+ ((howToGet == null) ? 0 : howToGet.hashCode());
		result = prime * result
				+ ((howToGetGold == null) ? 0 : howToGetGold.hashCode());
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		result = prime * result + ((name == null) ? 0 : name.hashCode());
		result = prime * result + ((raceId == null) ? 0 : raceId.hashCode());
		result = prime * result
				+ ((rarityId == null) ? 0 : rarityId.hashCode());
		result = prime * result + setId;
		result = prime * result + ((text == null) ? 0 : text.hashCode());
		result = prime * result
				+ ((textInPlay == null) ? 0 : textInPlay.hashCode());
		result = prime * result + typeId;
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Card other = (Card) obj;
		if (artistName == null) {
			if (other.artistName != null)
				return false;
		} else if (!artistName.equals(other.artistName))
			return false;
		if (attack == null) {
			if (other.attack != null)
				return false;
		} else if (!attack.equals(other.attack))
			return false;
		if (collectible != other.collectible)
			return false;
		if (cost == null) {
			if (other.cost != null)
				return false;
		} else if (!cost.equals(other.cost))
			return false;
		if (durability == null) {
			if (other.durability != null)
				return false;
		} else if (!durability.equals(other.durability))
			return false;
		if (elite != other.elite)
			return false;
		if (factionId == null) {
			if (other.factionId != null)
				return false;
		} else if (!factionId.equals(other.factionId))
			return false;
		if (flavourText == null) {
			if (other.flavourText != null)
				return false;
		} else if (!flavourText.equals(other.flavourText))
			return false;
		if (gameId == null) {
			if (other.gameId != null)
				return false;
		} else if (!gameId.equals(other.gameId))
			return false;
		if (health == null) {
			if (other.health != null)
				return false;
		} else if (!health.equals(other.health))
			return false;
		if (heroClassId == null) {
			if (other.heroClassId != null)
				return false;
		} else if (!heroClassId.equals(other.heroClassId))
			return false;
		if (howToGet == null) {
			if (other.howToGet != null)
				return false;
		} else if (!howToGet.equals(other.howToGet))
			return false;
		if (howToGetGold == null) {
			if (other.howToGetGold != null)
				return false;
		} else if (!howToGetGold.equals(other.howToGetGold))
			return false;
		if (id == null) {
			if (other.id != null)
				return false;
		} else if (!id.equals(other.id))
			return false;
		if (name == null) {
			if (other.name != null)
				return false;
		} else if (!name.equals(other.name))
			return false;
		if (raceId == null) {
			if (other.raceId != null)
				return false;
		} else if (!raceId.equals(other.raceId))
			return false;
		if (rarityId == null) {
			if (other.rarityId != null)
				return false;
		} else if (!rarityId.equals(other.rarityId))
			return false;
		if (setId != other.setId)
			return false;
		if (text == null) {
			if (other.text != null)
				return false;
		} else if (!text.equals(other.text))
			return false;
		if (textInPlay == null) {
			if (other.textInPlay != null)
				return false;
		} else if (!textInPlay.equals(other.textInPlay))
			return false;
		if (typeId != other.typeId)
			return false;
		return true;
	}

	@Override
	public String toString() {
		return "Card [id=" + id + ", gameId=" + gameId + ", name=" + name
				+ ", attack=" + attack + ", health=" + health + ", setId="
				+ setId + ", typeId=" + typeId + ", factionId=" + factionId
				+ ", rarityId=" + rarityId + ", raceId=" + raceId
				+ ", heroClassId=" + heroClassId + ", cost=" + cost
				+ ", durability=" + durability + ", text=" + text
				+ ", textInPlay=" + textInPlay + ", flavourText=" + flavourText
				+ ", artistName=" + artistName + ", collectible=" + collectible
				+ ", elite=" + elite + ", howToGet=" + howToGet
				+ ", howToGetGold=" + howToGetGold + "]";
	}

}
